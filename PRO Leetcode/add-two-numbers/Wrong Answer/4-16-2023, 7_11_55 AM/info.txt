{"id":934745180,"lang":"cpp","lang_name":"C++","time":"4Â weeks","timestamp":1681654315,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/934745180/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"N/A","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* first = l1;\n        ListNode* second = l2;\n        ListNode* res = NULL;\n        ListNode* temp = NULL;\n        int carry = 0;\n        while(first && second){\n            int num = first->val + second->val;\n\n            if(!res){\n                res = new ListNode(num%10);\n                carry = num/10;\n                temp = res;\n            }\n            else{\n                temp->next = new ListNode((num+carry)%10);\n                carry = num/10;\n                temp = temp->next;\n            }\n            first = first->next;\n            second = second->next;\n        }\n\n        while(first){\n            int num = first->val+carry;\n            temp->next = new ListNode(num%10);\n            carry = num/10;\n            temp = temp->next;\n            first = first->next;\n        }\n\n        while(second){\n            int num = second->val+carry;\n            temp->next = new ListNode(num%10);\n            carry = num/10;\n            temp = temp->next;\n            second = second->next;\n        }\n\n        if(carry){\n            temp->next = new ListNode(1);\n        }\n\n        return res;\n    }\n\n};","compare_resulttitle_slug":"add-two-numbers","has_notes":false}