{"id":912018211,"lang":"cpp","lang_name":"C++","time":"2Â months","timestamp":1678358141,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/912018211/","is_pending":"Not Pending","title":"Maximum Product Subarray","memory":"13.8 MB","code":"class Solution {\npublic:\n    int maxProduct(vector<int>& nums) {\n        int maxLeft = nums[0];\n        int maxRight = nums[0];\n        int prod = 1;\n        bool zeroPresent = false;\n        for(int num:nums){\n            prod *= num;\n            if(num == 0){\n                prod = 1;\n                zeroPresent = true;\n                continue;\n            }\n            maxLeft = max(maxLeft, prod);\n        }\n        prod = 1;\n        for(int i=nums.size()-1; i>=0;i--){\n            prod *= nums[i];\n            if(nums[i] == 0){\n                prod = 1;\n                zeroPresent = true;\n                continue;\n            }\n            maxRight = max(maxRight, prod);\n        }\n        if(zeroPresent) return max(max(maxLeft, maxRight), 0);\n        else return max(maxLeft, maxRight);\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"maximum-product-subarray","has_notes":false}