{"id":936857089,"lang":"cpp","lang_name":"C++","time":"3 weeks, 3 days","timestamp":1681988147,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/936857089/","is_pending":"Not Pending","title":"Linked List Cycle II","memory":"7.8 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode(int x) : val(x), next(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode *detectCycle(ListNode *head) {\n        ListNode* fast = head;\n        ListNode* slow = head;\n        while(fast && fast->next){\n            fast = fast->next->next;\n            slow = slow->next;\n\n            if(fast == slow){\n                slow = head;\n                while(slow!=fast){\n                    slow = slow->next;\n                    fast = fast->next;\n                }\n                return slow;\n            }\n        }\n        return NULL;\n    }\n};","compare_result":"11111111111111111","title_slug":"linked-list-cycle-ii","has_notes":false}