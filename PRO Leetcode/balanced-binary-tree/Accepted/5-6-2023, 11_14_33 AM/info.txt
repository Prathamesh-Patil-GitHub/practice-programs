{"id":945620597,"lang":"cpp","lang_name":"C++","time":"1 week, 1 day","timestamp":1683396873,"status":10,"status_display":"Accepted","runtime":"17 ms","url":"/submissions/detail/945620597/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"20.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n\n    int getHeight(TreeNode *root, bool &ans){\n        if(!root || !ans){\n            return 0;\n        }\n\n        int left = getHeight(root->left, ans);\n        int right = getHeight(root->right, ans);\n        if(abs(left-right)>1){\n            ans = false;\n        }\n        return max(left, right)+1;\n    }\n\n\n    bool isBalanced(TreeNode* root) {\n        \n        bool ans = true;\n        getHeight(root, ans);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree","has_notes":false}